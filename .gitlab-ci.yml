include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/release/publish.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/validate/docker-compose-trigger.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-docker-image.yaml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-dockerfile.yaml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-md-files.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/deploy/dev-env-update.yml"

variables:
  COMPONENT_VERSION: "latest"

image: registry.hpc.ut.ee/mirror/library/node:lts-alpine

cache:
  key: "$CI_COMMIT_REF_NAME"
  policy: pull
  paths:
    - .yarn
    - node_modules/

before_script:
  - apk add git || echo "Non-Alpine image, skipping"
  - yarn config set cache-folder .yarn
  - yarn install --frozen-lockfile

Run linters:
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - yarn format:check
    - yarn lint:check

Run jest tests:
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - yarn jest --verbose --runInBand --coverage --reporters=jest-junit
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

Run E2E tests:
  image:
    name: registry.hpc.ut.ee/mirror/cypress/included:6.2.0
    entrypoint: [""]
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - npm install -g yarn
    - yarn config set cache-folder .yarn
    - yarn install --frozen-lockfile
    - NO_COLOR=1 yarn ci:test
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos
    reports:
      junit:
        - cypress/results/output-*.xml

Build artifact:
  stage: build
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - yarn build
  artifacts:
    paths:
      - build/
    expire_in: 1 week

Lint docker image:
  extends: .Lint docker image template
  variables:
    IMAGE: opennode/waldur-homeport:latest
    DOCKERFILE: Dockerfile
  before_script: []

Lint dockerfile:
  extends: .Lint dockerfile template
  variables:
    DOCKERFILE: Dockerfile
    HADOLINT_CONFIG: |
      ignored:
        - DL3018 # "versions for `apk add`" warning
  before_script: []

Upload translatable strings:
  stage: build
  interruptible: true
  rules:
    - if: '$SKIP_I18N_UPLOAD == "true" || $SKIP_I18N_UPLOAD == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "master"'
  image:
    name: registry.hpc.ut.ee/mirror/localazy/cli:v1.6.3
  script:
    - sed 's/{\([^}]*\)\}/{__\1__}/g' locales/template.pot > template-for-localazy.pot
    - localazy upload source -w $LOCALAZY_WRITE_KEY -r $LOCALAZY_READ_KEY
  before_script: []

Download translation:
  stage: test
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
  image:
    name: registry.hpc.ut.ee/mirror/localazy/cli:latest
  script:
    - apt update && apt install -y git
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git remote set-url origin "https://$GROUP_LOCALIZE_TOKEN_NAME:$GROUP_LOCALIZE_TOKEN_PASSWORD@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git fetch
    - git branch -D new-translations  || echo "No translation branch" # cleanup
    - localazy download -w $LOCALAZY_WRITE_KEY -r $LOCALAZY_READ_KEY
    - find locales -type f -name '*.po' -exec sed -i 's/{__\([^}]*\)__\}/{\1}/g' {} \;
    - git status
    - git add locales/*
    - git commit locales -m "Updates translations" || exit 0
    - git status
    - echo "Committing updated translations"
    - git branch new-translations
    - git push --set-upstream origin new-translations:develop
  before_script: []

# TODO: remove before merging
Test image building with kaniko:
  stage: .pre
  extends:
    - Publish latest docker image
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - AUTH=$(echo -n "${WALDUR_DOCKER_HUB_USER}:${WALDUR_DOCKER_HUB_PASSWORD}" | base64)
    - |
      cat << EOF > /kaniko/.docker/config.json
      {
        "auths": {
          "https://index.docker.io/v1/": {
            "auth": "${AUTH}"
          }
        }
      }
      EOF
    - echo $CI_COMMIT_SHA > COMMIT
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --single-snapshot
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --build-arg DOCKER_REGISTRY=$DOCKER_REGISTRY
      --no-push
      --destination "opennode/$CI_PROJECT_NAME:latest"
